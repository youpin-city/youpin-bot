const await = require('asyncawait/await');
const async = require('asyncawait/async');
const Promise = require('bluebird');
const _ = require('lodash');

module.exports = (m, api, conversation, apiUserId) => {
  'use strict';

  const PAYLOAD_NEW_PIN = 'new_pin';
  const PAYLOAD_CONTACT_US = 'contact_us';
  const PAYLOAD_ENGLISH = 'english';
  const PAYLOAD_THAI = 'thai';

  const PIN_TYPE_BIKE = 'pin_type_bike';
  const PIN_TYPE_BOAT = 'pin_type_boat';
  const PIN_TYPE_TREE = 'pin_type_tree';
  const PIN_TYPE_OTHERS = 'pin_type_others';

  const STATE_WAIT_INTENT = 'wait_intent';
  const STATE_DISABLED = 'disabled';
  const STATE_WAIT_IMG = 'wait_image';
  const STATE_WAIT_LOCATION = 'wait_pin';
  const STATE_WAIT_DESC = 'wait_desc';
  const STATE_WAIT_TAGS = 'wait_tags';

  const endingReply = m.createQuickReplyButton('#‡∏à‡∏ö‡∏ô‡∏∞', 'isEnding');
  const endingReplyEN = m.createQuickReplyButton('#done', 'isEnding');

  // Max 9 categories
  const categories = [
    ['‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡πâ‡∏≤', 'footpath'],
    ['‡∏°‡∏•‡∏†‡∏≤‡∏ß‡∏∞', 'pollution'],
    ['‡∏ñ‡∏ô‡∏ô', 'roads'],
    ['‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', 'publictransport'],
    ['‡∏Ç‡∏¢‡∏∞', 'garbage'],
    ['‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥', 'drainage'],
    ['‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ', 'trees'],
    ['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢', 'safety'],
    ['‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥', 'violation']
  ];

  let tagReplies = [endingReply];
  let tagRepliesEN = [endingReplyEN];
  categories.forEach((item) => {
    tagReplies.push(m.createQuickReplyButton('#' + item[0], item[1]));
    tagRepliesEN.push(m.createQuickReplyButton('#' + item[1], item[1]));
  });

  function greet(userid, firstName) {
    const buttons = [
      m.createPostbackButton('‡∏û‡∏¥‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤', PAYLOAD_NEW_PIN),
      m.createPostbackButton('‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô', PAYLOAD_CONTACT_US),
      m.createPostbackButton('I can\'t read Thai', PAYLOAD_ENGLISH)
    ];

    m.sendButton(
      userid,
      `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Æ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì ${firstName} ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏õ‡πâ‡∏≤‡∏¢‡∏∏‡∏û‡∏¥‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏à‡πä‡∏∞`,
      buttons
    );
  }

  function greetEN(userid, firstName) {
    const buttons = [
      m.createPostbackButton('Report an issue', PAYLOAD_NEW_PIN),
      m.createPostbackButton('Contact us', PAYLOAD_CONTACT_US),
      m.createPostbackButton('‡∏û‡∏π‡∏î‡πÑ‡∏ó‡∏¢‡πÄ‡∏ñ‡∏≠‡∏∞‡∏õ‡πâ‡∏≤', PAYLOAD_THAI)
    ];

    m.sendButton(
      userid,
      `Hi ${firstName}! What would you like to do today?`,
      buttons
    );
  }

  function addPhotos(attachments, context) {

    attachments = _.filter( attachments, (item) => {
        return _.includes( ['image','video'], item.type );
    });

    return Promise.map( attachments, (item) => {
      return new Promise( (resolve, reject) => {
        if (item.type === 'image') {
          api.uploadPhotoFromURL( item.payload.url, (res) => {
            item.payload.url = res.url;
            resolve(item);
          });
        } else {
          // TODO: upload video to firebase
          resolve(item);
        }
      });
    }).each( (item) => {
      let type = "videos";
        if (item.type === 'image') {
          type = "photos";
        }
      context[type].push(item.payload.url);
    });
  }

  function processText(messageText, context) {
    // Sanitize string
    messageText = messageText.trim().replace( /[\s\n\r]+/g, ' ');

    let isEnding = false;
    let endPos = -1;
    if (!context.isEnglish) {
      endPos = messageText.indexOf('#‡∏à‡∏ö‡∏ô‡∏∞');
    } else {
      endPos = messageText.indexOf('#done');
    }

    if (endPos >= 0) {
      isEnding = true;
      messageText = messageText.substr(0, endPos);
    }

    if (messageText.length > 0) {
      if (context.desc) {
        context.desc.push(messageText);
        context.descLength += messageText.length;
      } else {
        context.desc = [messageText];
        context.descLength = messageText.length;
      }

      let hashtags = [];
      // Hacky solution -- regex gets too complicated with unicode characters.
      // https://github.com/twitter/twitter-text/blob/master/js/twitter-text.js
      const tokens = messageText.split(' ');
      tokens.forEach(str => {
        if (str[0] == '#' || str[0] == 'ÔºÉ') {
          hashtags.push(str.substr(1));
        }
      });

      if (hashtags.length > 0) {
        context.hashtags.push.apply(context.hashtags, hashtags);
      }
    }

    return isEnding;
  }

  return {
    onMessaged: async(function(event) {
      const userid = event.sender.id;
      const timestamp = event.timestamp;

      console.log(event.message);
      const message = event.message;
      let messageText = message ? message.text : undefined;
      const isSticker = message ? !!message.sticker_id : false;
      const attachments = message ? message.attachments : undefined;

      console.log(event.postback);
      const postback = event.postback ? event.postback.payload : undefined;

      let context = await(conversation.getContext(userid));

      console.log("---- Loaded previous context" ) ;
      console.log(context);

      // Override context
      if (messageText === '#‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà' || postback === PAYLOAD_THAI) {
        context = {};
      } else if (postback === PAYLOAD_ENGLISH) {
        context = { isEnglish: true };
      }

      context.lastReceived = timestamp;

      if (context.state === STATE_DISABLED) {
        return;
      } else if (!context.state) {
        // New session
        context.firstReceived = timestamp;

        let profile = await(new Promise( (resolve,reject) => {
          m.getProfile(userid, resolve);
        }));

        context.profile  = profile;
        context.lastSent = (new Date()).getTime();
        context.state    = STATE_WAIT_INTENT;

        if (context.isEnglish) {
          greetEN(userid, profile.first_name);
        } else {
          greet(userid, profile.first_name);
        }

      } else if (context.state === STATE_WAIT_INTENT) {
        if (postback === PAYLOAD_NEW_PIN) {
          context.lastSent = (new Date()).getTime();
          if (!context.isEnglish) {
            m.sendText(userid, '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏Æ‡πà‡∏≤ ‡∏°‡∏±‡∏ß‡∏£‡∏≠‡∏ä‡πâ‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏•‡πà‡∏∞‡∏Æ‡∏∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤!');
          } else {
            m.sendText(userid, 'Awesome, let\'s get started!')
          }

          await(new Promise( (resolve, reject) => {
            setTimeout(() => {
              context.lastSent = (new Date()).getTime();
              context.state = STATE_WAIT_IMG;
              context.photos = [];
              context.videos = [];
              if (!context.isEnglish) {
                m.sendText(userid, '‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏•‡∏¢ ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏±‡πä‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Æ‡πà‡∏≤ ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ô‡∏≠‡∏∞');
              } else {
                m.sendText(userid, 'First, can you send me photos or videos of the issue you found?');
              }
              resolve();
            }, 1000);
          }));

        } else if (postback === PAYLOAD_CONTACT_US) {
          context.lastSent = (new Date()).getTime();
          context.state = STATE_DISABLED;
          if (!context.isEnglish) {
            m.sendText(userid, '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Æ‡πâ‡∏≤ ' +
            '‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏Ç‡∏≠‡∏á‡∏î‡∏±‡πä‡∏ô‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Æ‡πà‡∏≤ ');
          } else {
            m.sendText(userid, 'You can leave us messages, and ' +
            'our staff will get back to you as soon as possible.');
          }
        } else {
          if (!context.isEnglish) {
            m.sendText(userid, '‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô‡πÜ‡∏ô‡∏∞‡∏Æ‡πâ‡∏≤ ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡∏±‡πä‡∏ô‡∏Æ‡∏±‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô');
          } else {
            m.sendText(userid, 'Slow down, could you please answer my question first?');
          }
        }
      } else if (context.state === STATE_WAIT_IMG) {
        if (attachments) {
          if (!isSticker && (attachments[0].type == 'image' || attachments[0].type == 'video')) {
            context.lastSent = (new Date()).getTime();
            if (!context.isEnglish) {
              m.sendText(userid, '(Y) ‡πÅ‡∏à‡πà‡∏°‡∏°‡∏≤‡∏Å‡∏Æ‡πà‡∏≤');
            } else {
              m.sendText(userid, '(Y) Sweet!');
            }
            await(addPhotos(attachments, context));
            await(new Promise( (resolve,reject) => {
              setTimeout(() => {
                context.lastSent = (new Date()).getTime();
                context.state = STATE_WAIT_LOCATION;
                if (!context.isEnglish) {
                  m.sendText(userid, '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå ' +
                  'location ‡∏à‡∏≤‡∏Å Messenger App ‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏Æ‡πà‡∏≤');
                } else {
                  m.sendText(userid, 'Next, can you help us locate the issue by sharing the location using ' +
                  'Facebook Messenger App on your mobile phone?')
                }
                resolve();
              }, 1000);
            }));
          } else {
            if (!context.isEnglish) {
              m.sendText(userid, '‡∏Ç‡∏≠‡∏£‡∏π‡∏õ‡∏Æ‡πà‡∏∞‡∏£‡∏π‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πá‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡∏Æ‡πà‡∏≤ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏ô‡πâ‡∏≤ ‡∏î‡∏±‡πä‡∏ô‡∏™‡∏±‡∏ö‡∏™‡∏ô‡πÑ‡∏õ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Æ‡πâ‡∏≤');
            } else {
              m.sendText(userid, 'Just photos or videos please. I\'m getting confused! üòì');
            }
          }
        } else {
          if (!context.isEnglish) {
            m.sendText(userid, '‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πÄ‡∏•‡∏¢‡∏Æ‡πà‡∏≤');
          } else {
            m.sendText(userid, 'Hurry up, I\'m still waiting for photos or videos.');
          }
        }
      } else if (context.state === STATE_WAIT_LOCATION) {
        if (attachments && attachments[0].type == 'location') {
          context.lastSent = (new Date()).getTime();
          if (!context.isEnglish) {
            m.sendText(userid, 'üö© ‡∏≠‡πâ‡∏≤ ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏µ‡πà‡πÄ‡∏≠‡∏á');
          } else {
            m.sendText(userid, 'üö© Ahh, got it.');
          }
          const point = attachments[0].payload.coordinates;
          context.location = [point.lat, point.long];
          await(new Promise( (resolve,reject) => {
            setTimeout(() => {
              context.lastSent = (new Date()).getTime();
              context.state = STATE_WAIT_DESC;
              context.hashtags = [];
              if (!context.isEnglish) {
                m.sendText(userid, '‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏´‡πâ‡∏î‡∏±‡πä‡∏ô‡∏Æ‡∏±‡πâ‡∏ô‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Æ‡πà‡∏≤ ‡πÄ‡∏≠‡∏≤‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÜ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Æ‡∏∞');
              } else {
                m.sendText(userid, 'Alright, can you explain the issue you\'d like to report today? ' +
                'Please make it as detailed as possible.');
              }
              resolve();
            }, 1000);
          }));
        } else if (!isSticker && attachments && attachments.length > 0 && (attachments[0].type == 'image' || attachments[0].type == 'video')) {
          // Add photos/videos
          context.lastSent = (new Date()).getTime();
          if (!context.isEnglish) {
            m.sendText(userid, '(Y) ‡πÄ‡∏•‡∏¥‡∏®‡∏Æ‡πà‡∏≤ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏™‡πà‡∏á‡∏û‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏î‡∏±‡πä‡∏ô‡∏Æ‡∏±‡πâ‡∏ô‡∏ô‡∏∞‡∏Æ‡πâ‡∏≤');
          } else {
            m.sendText(userid, '(Y) Cool! Don\'t forget to send me the location.');
          }
          await(addPhotos(attachments, context));
        } else {
          if (!context.isEnglish) {
            m.sendText(userid, '‡∏û‡∏¥‡∏ô location ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πä‡∏∞‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Æ‡πâ‡∏≤ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Æ‡πà‡∏≤')
          } else {
            m.sendText(userid, 'Let us know the location so that the responsible agency can take care of the problem quickly.')
          }
        }
      } else if (context.state === STATE_WAIT_DESC) {
        if (messageText) {
          const isEnding = processText(messageText, context);

          if (isEnding) {
            if (context.descLength < 10) {
              context.lastSent = (new Date()).getTime();
              if (!context.isEnglish) {
                m.sendText(userid, '‡πÄ‡∏•‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡πâ‡∏î‡∏±‡πä‡∏ô‡∏Æ‡∏±‡πâ‡∏ô‡∏ü‡∏±‡∏á‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡πà‡∏≤ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Æ‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå');
              } else {
                m.sendText(userid, 'Provide us a little more detail please.');
              }
            } else {
              context.state = STATE_WAIT_TAGS;
              context.categories = [];
              if (!context.isEnglish) {
                m.sendTextWithReplies(userid, '‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏±‡πä‡∏ô‡∏Æ‡∏±‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Æ‡πà‡∏≤ ‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ' +
                '‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå #‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÄ‡∏≠‡∏á‡πÄ‡∏•‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Æ‡πâ‡∏≤', tagReplies.slice(1));
              } else {
                m.sendTextWithReplies(userid, 'Could you please help me select appropriate categories for the issue? ' +
                'You can pick one from the list below or type #<category> for a custom category.', tagRepliesEN.slice(1));
              }
            }
          } else {
            if (context.desc.length == 1) {
              // After 1st response
              context.lastSent = (new Date()).getTime();
              if (!context.isEnglish) {
                m.sendTextWithReplies(
                  userid,
                  '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡πà‡∏≠‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Æ‡πâ‡∏≤ ‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏Å‡πá ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏°‡∏≤‡∏ß‡πà‡∏≤ #‡∏à‡∏ö‡∏ô‡∏∞ ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏±‡πä‡∏ô‡∏Æ‡∏±‡πâ‡∏ô' +
                  '‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Æ‡πà‡∏≤',
                  [endingReply]
                );
              } else {
                m.sendTextWithReplies(
                  userid,
                  'You can keep on typing! Send \'#done\' when you finish so that we can proceed to the next step.',
                  [endingReplyEN]
                );
              }
            } else if (context.descLength > 140) {
              context.lastSent = (new Date()).getTime();
              if (!context.isEnglish) {
                m.sendTextWithReplies(
                  userid,
                  '‡∏à‡∏ö‡∏°‡∏±‡πâ‡∏¢? ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡∏Å‡πá‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡πà‡∏≠‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ‡∏ô‡∏∞‡∏Æ‡∏∞ ‡πÄ‡∏≠‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏•‡∏¢‡∏Æ‡πà‡∏≤',
                  [endingReply]
                );
              } else {
                m.sendTextWithReplies(
                  userid,
                  'Done? If not, don\'t worry, I\'m still listening.',
                  [endingReplyEN]
                );
              }
            }
          }
        } else if (!isSticker && attachments) {
          if (attachments[0].type == 'image' || attachments[0].type == 'video') {
            // Add photos/videos
            context.lastSent = (new Date()).getTime();
            if (!context.isEnglish) {
              m.sendText(userid, '‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏¢‡∏≠‡∏∞‡∏ô‡∏∞‡∏Æ‡πâ‡∏≤ ‡∏î‡∏±‡πä‡∏ô‡∏Æ‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á‡πÅ‡∏ü‡πâ‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÄ‡∏•‡πà‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Æ‡πà‡∏≤');
            } else {
              m.sendText(userid, 'The photos/videos have been added. ' +
              'You can continue describing the issue.')
            }
            addPhotos(attachments, context);
          } else if (attachments[0].type == 'location') {
            context.lastSent = (new Date()).getTime();
            if (!context.isEnglish) {
              m.sendText(userid, 'üö© ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Æ‡πâ‡∏≤ ');
            } else {
              m.sendText(userid, 'üö© The location has been updated. ');
            }
            const point = attachments[0].payload.coordinates;
            context.location = [point.lat, point.long];
          }
        }
      } else if (context.state === STATE_WAIT_TAGS) {
        if (messageText) {
          if (message.quick_reply) {
            if (message.quick_reply.payload != 'isEnding') {
              context.categories.push(message.quick_reply.payload);
            }
          }

          const isEnding = processText(messageText, context);

          if (isEnding) {
            context.lastSent = (new Date()).getTime();
            if (!context.isEnglish) {
              m.sendText(userid, `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Æ‡πà‡∏≤ ‡∏î‡∏±‡πä‡∏ô‡∏Æ‡∏±‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì ${context.profile.first_name} ` +
                '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡∏π‡πÉ‡∏ô‡πÄ‡∏ß‡∏ö‡∏ï‡∏≤‡∏°‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Æ‡πâ‡∏≤ ');
              } else {
                m.sendText(userid, `Thank you very much, ${context.profile.first_name}. ` +
                  'Please follow the link below to verify yourself and submit the report. ' +
                  'We will notify the responsible agency as soon as possible.')
                }
                const desc = context.desc.join(' ');
                let res = await( new Promise( (resolve,reject) => {
                  api.postPin(
                    {
                      categories: context.categories,
                      created_time: (new Date()).getTime(),
                      detail: desc,
                      location: {
                        coordinates: context.location
                      },
                      owner: apiUserId,
                      photos: context.photos,
                      provider: apiUserId,
                      status: 'unverified',
                      tags: context.hashtags
                    },
                    resolve
                  );
                }));
                const pinId = res._id
                const elements = [{
                  title: '‡∏¢‡∏∏‡∏û‡∏¥‡∏ô | YouPin',
                  subtitle: desc,
                  item_url: `http://youpin.city/pins/${pinId}`,
                  image_url: context.photos[0]
                }]
                m.sendGeneric(userid, elements);
                context = {};
                await(conversation.updateContext(userid, context));
              } else {
                context.lastSent = (new Date()).getTime();
                if (!context.isEnglish) {
                  m.sendTextWithReplies(userid, '‡∏à‡∏ö‡∏°‡∏±‡πâ‡∏¢? ‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ‡∏ô‡∏∞‡∏Æ‡∏∞', tagReplies);
                } else {
                  m.sendTextWithReplies(userid, 'Anything else? You can keep adding more tags.' , tagRepliesEN);
                }
              }
            }
          }

          await(conversation.updateContext(userid, context));
          console.log("-- Saved context --");
          console.log(context);
        })
      };
    };
